# This pipeline is triggered on every push to the 'main' branch.
trigger:
- main

variables:
  # This links your secret variable group
  - group: WebApp-Secrets

  # These define the other pipeline variables using the correct list syntax
  # !!! Remember to check these placeholder values !!!
  - name: azureServiceConnection
    value: 'AzureStudentSubscription' 
  - name: resourceGroupName
    value: 'cloud-project'                
  - name: backendAppName
    value: 'achievement-log'        
  - name: frontendAppName
    value: 'achievement-log'      
  - name: frontendFolder
    value: 'frontend'
  - name: serverFolder
    value: 'server'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build_Frontend
    displayName: 'Build Frontend Artifact'
    pool:
      name: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js 20.x'

    - script: |
        echo "--- SCRIPT STARTING ---"
        npm install
        echo "--- NPM INSTALL COMPLETE, RUNNING BUILD NOW ---"
        npm run build
        echo "--- SCRIPT FINISHED ---"
      displayName: 'Install dependencies and build frontend'
      workingDirectory: '$(frontendFolder)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Frontend Artifact'
      inputs:
        targetPath: '$(frontendFolder)/dist'
        artifact: 'frontend_dist'

  - job: Build_Server
    displayName: 'Build Server Artifact'
    pool:
      name: newpool
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js 20.x'

    - script: |
        cd $(serverFolder)
        npm install --production
      displayName: 'Install server dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive Server Files'
      inputs:
        rootFolderOrFile: '$(serverFolder)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Server Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/server.zip'
        artifact: 'server_dist'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy_Services
    displayName: 'Deploy to Azure'
    environment: 'production'
    pool:
      name: newpool
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download All Artifacts'
            inputs:
              path: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            displayName: 'Deploy Backend to App Service'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppLinux'
              appName: $(backendAppName)
              package: '$(Pipeline.Workspace)/server_dist/server.zip'
              runtimeStack: 'NODE|20-lts'

          - task: AzureAppServiceSettings@1
            displayName: 'Update Backend App Settings with Secrets'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(backendAppName)
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  { "name": "PORT", "value": "$(PORT)", "slotSetting": false },
                  { "name": "ADMIN_USERNAME", "value": "$(ADMIN_USERNAME)", "slotSetting": false },
                  { "name": "ADMIN_PASSWORD", "value": "$(ADMIN_PASSWORD)", "slotSetting": false },
                  { "name": "DUMMY_TOKEN", "value": "$(DUMMY_TOKEN)", "slotSetting": false },
                  { "name": "COSMOS_ENDPOINT", "value": "$(COSMOS_ENDPOINT)", "slotSetting": false },
                  { "name": "COSMOS_KEY", "value": "$(COSMOS_KEY)", "slotSetting": false },
                  { "name": "COSMOS_DATABASE_ID", "value": "$(COSMOS_DATABASE_ID)", "slotSetting": false },
                  { "name": "COSMOS_CONTAINER_ID", "value": "$(COSMOS_CONTAINER_ID)", "slotSetting": false }
                ]

          - task: AzureStaticWebApp@0
            displayName: 'Deploy Frontend to Static Web App'
            inputs:
              azure_static_web_apps_api_token: $(deployment_token)
              app_location: '$(Pipeline.Workspace)/frontend_dist'
              output_location: ''