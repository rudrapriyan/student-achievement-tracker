# This pipeline is triggered on every push to the 'main' branch.
trigger:
- main

# Define variables for reuse.
# !!! IMPORTANT: PLEASE UPDATE THE 3 PLACEHOLDER VALUES BELOW !!!
variables:
  # Azure DevOps details
  # Verify this is the exact name of the service connection you created in Step 3.3
  azureServiceConnection: 'AzureStudentSubscription-WIF' 
  variableGroupName: 'WebApp-Secrets'               # Your variable group name

  # Azure Resource details
  resourceGroupName: 'cloud-project'                # Your Resource Group name
  # UPDATE THIS with the name of your Azure App Service for the backend
  backendAppName: 'achievement-log'        
  # UPDATE THIS with the name of your Azure Static Web App
  frontendAppName: 'achievement-log'      

  # Project structure details
  frontendFolder: 'frontend'
  serverFolder: 'server'

# A pipeline is composed of stages. We'll have a Build stage and a Deploy stage.
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build_Frontend
    displayName: 'Build Frontend Artifact'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x' # Using Node.js version 20
      displayName: 'Install Node.js 20.x'

    - script: |
        cd $(frontendFolder)
        npm install
        npm run build
      displayName: 'Install dependencies and build frontend'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Frontend Artifact'
      inputs:
        targetPath: '$(frontendFolder)/build' # Change 'build' to 'dist' if your framework uses that
        artifact: 'frontend_dist'

  - job: Build_Server
    displayName: 'Build Server Artifact'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x' # Using Node.js version 20
      displayName: 'Install Node.js 20.x'

    - script: |
        cd $(serverFolder)
        npm install --production
      displayName: 'Install server dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive Server Files'
      inputs:
        rootFolderOrFile: '$(serverFolder)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Server Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/server.zip'
        artifact: 'server_dist'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy_Services
    displayName: 'Deploy to Azure'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          # Link the variable group to this deployment job
          - task: UseVariableGroup@1
            inputs:
              groupName: $(variableGroupName)

          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download All Artifacts'
            inputs:
              path: '$(Pipeline.Workspace)'

          # Deploy Backend to Azure App Service
          - task: AzureWebApp@1
            displayName: 'Deploy Backend to App Service'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppLinux'
              appName: $(backendAppName)
              package: '$(Pipeline.Workspace)/server_dist/server.zip'
              runtimeStack: 'NODE|20-lts' # Using Node.js version 20

          # Inject all 8 of your secrets into App Service Configuration
          - task: AzureAppServiceSettings@1
            displayName: 'Update Backend App Settings with Secrets'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(backendAppName)
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  { "name": "PORT", "value": "$(PORT)", "slotSetting": false },
                  { "name": "ADMIN_USERNAME", "value": "$(ADMIN_USERNAME)", "slotSetting": false },
                  { "name": "ADMIN_PASSWORD", "value": "$(ADMIN_PASSWORD)", "slotSetting": false },
                  { "name": "DUMMY_TOKEN", "value": "$(DUMMY_TOKEN)", "slotSetting": false },
                  { "name": "COSMOS_ENDPOINT", "value": "$(COSMOS_ENDPOINT)", "slotSetting": false },
                  { "name": "COSMOS_KEY", "value": "$(COSMOS_KEY)", "slotSetting": false },
                  { "name": "COSMOS_DATABASE_ID", "value": "$(COSMOS_DATABASE_ID)", "slotSetting": false },
                  { "name": "COSMOS_CONTAINER_ID", "value": "$(COSMOS_CONTAINER_ID)", "slotSetting": false }
                ]

          # Deploy Frontend to Azure Static Web App
          - task: AzureStaticWebApp@0
            displayName: 'Deploy Frontend to Static Web App'
            inputs:
              azure_static_web_apps_api_token: $(deployment_token)
              app_location: '$(Pipeline.Workspace)/frontend_dist'
              output_location: ''